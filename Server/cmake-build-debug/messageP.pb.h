// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messageP.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messageP_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messageP_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messageP_2eproto
PROTOBUF_NAMESPACE_OPEN
        namespace internal {
            class AnyMetadata;
        }  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messageP_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messageP_2eproto;
namespace protobuf {
    class Chunk;
    class ChunkDefaultTypeInternal;
    extern ChunkDefaultTypeInternal _Chunk_default_instance_;
    class Empty;
    class EmptyDefaultTypeInternal;
    extern EmptyDefaultTypeInternal _Empty_default_instance_;
    class FileClientMap;
    class FileClientMapDefaultTypeInternal;
    extern FileClientMapDefaultTypeInternal _FileClientMap_default_instance_;
    class FileClientMap_FileClientMapEntry_DoNotUse;
    class FileClientMap_FileClientMapEntry_DoNotUseDefaultTypeInternal;
    extern FileClientMap_FileClientMapEntry_DoNotUseDefaultTypeInternal _FileClientMap_FileClientMapEntry_DoNotUse_default_instance_;
    class FileInfo;
    class FileInfoDefaultTypeInternal;
    extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
    class FileName;
    class FileNameDefaultTypeInternal;
    extern FileNameDefaultTypeInternal _FileName_default_instance_;
    class FilesInfoList;
    class FilesInfoListDefaultTypeInternal;
    extern FilesInfoListDefaultTypeInternal _FilesInfoList_default_instance_;
    class Message;
    class MessageDefaultTypeInternal;
    extern MessageDefaultTypeInternal _Message_default_instance_;
    class ProfileInfo;
    class ProfileInfoDefaultTypeInternal;
    extern ProfileInfoDefaultTypeInternal _ProfileInfo_default_instance_;
    class Symbol;
    class SymbolDefaultTypeInternal;
    extern SymbolDefaultTypeInternal _Symbol_default_instance_;
    class SymbolVector;
    class SymbolVectorDefaultTypeInternal;
    extern SymbolVectorDefaultTypeInternal _SymbolVector_default_instance_;
    class User;
    class UserDefaultTypeInternal;
    extern UserDefaultTypeInternal _User_default_instance_;
    class UserLogged;
    class UserLoggedDefaultTypeInternal;
    extern UserLoggedDefaultTypeInternal _UserLogged_default_instance_;
    class UserMap;
    class UserMapDefaultTypeInternal;
    extern UserMapDefaultTypeInternal _UserMap_default_instance_;
    class UserMap_UserMapEntry_DoNotUse;
    class UserMap_UserMapEntry_DoNotUseDefaultTypeInternal;
    extern UserMap_UserMapEntry_DoNotUseDefaultTypeInternal _UserMap_UserMapEntry_DoNotUse_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
        template<> ::protobuf::Chunk* Arena::CreateMaybeMessage<::protobuf::Chunk>(Arena*);
        template<> ::protobuf::Empty* Arena::CreateMaybeMessage<::protobuf::Empty>(Arena*);
        template<> ::protobuf::FileClientMap* Arena::CreateMaybeMessage<::protobuf::FileClientMap>(Arena*);
        template<> ::protobuf::FileClientMap_FileClientMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::FileClientMap_FileClientMapEntry_DoNotUse>(Arena*);
        template<> ::protobuf::FileInfo* Arena::CreateMaybeMessage<::protobuf::FileInfo>(Arena*);
        template<> ::protobuf::FileName* Arena::CreateMaybeMessage<::protobuf::FileName>(Arena*);
        template<> ::protobuf::FilesInfoList* Arena::CreateMaybeMessage<::protobuf::FilesInfoList>(Arena*);
        template<> ::protobuf::Message* Arena::CreateMaybeMessage<::protobuf::Message>(Arena*);
        template<> ::protobuf::ProfileInfo* Arena::CreateMaybeMessage<::protobuf::ProfileInfo>(Arena*);
        template<> ::protobuf::Symbol* Arena::CreateMaybeMessage<::protobuf::Symbol>(Arena*);
        template<> ::protobuf::SymbolVector* Arena::CreateMaybeMessage<::protobuf::SymbolVector>(Arena*);
        template<> ::protobuf::User* Arena::CreateMaybeMessage<::protobuf::User>(Arena*);
        template<> ::protobuf::UserLogged* Arena::CreateMaybeMessage<::protobuf::UserLogged>(Arena*);
        template<> ::protobuf::UserMap* Arena::CreateMaybeMessage<::protobuf::UserMap>(Arena*);
        template<> ::protobuf::UserMap_UserMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf::UserMap_UserMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

    class Empty :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Empty) */ {
    public:
        Empty();
        virtual ~Empty();

        Empty(const Empty& from);
        Empty(Empty&& from) noexcept
                : Empty() {
            *this = ::std::move(from);
        }

        inline Empty& operator=(const Empty& from) {
            CopyFrom(from);
            return *this;
        }
        inline Empty& operator=(Empty&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const Empty& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Empty* internal_default_instance() {
            return reinterpret_cast<const Empty*>(
                    &_Empty_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                0;

        void Swap(Empty* other);
        friend void swap(Empty& a, Empty& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Empty* New() const final {
            return CreateMaybeMessage<Empty>(nullptr);
        }

        Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<Empty>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const Empty& from);
        void MergeFrom(const Empty& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Empty* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.Empty";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // @@protoc_insertion_point(class_scope:protobuf.Empty)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class Message :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Message) */ {
    public:
        Message();
        virtual ~Message();

        Message(const Message& from);
        Message(Message&& from) noexcept
                : Message() {
            *this = ::std::move(from);
        }

        inline Message& operator=(const Message& from) {
            CopyFrom(from);
            return *this;
        }
        inline Message& operator=(Message&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const Message& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Message* internal_default_instance() {
            return reinterpret_cast<const Message*>(
                    &_Message_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                1;

        void Swap(Message* other);
        friend void swap(Message& a, Message& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Message* New() const final {
            return CreateMaybeMessage<Message>(nullptr);
        }

        Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<Message>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const Message& from);
        void MergeFrom(const Message& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Message* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.Message";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string fileIdentifier = 1;
        void clear_fileidentifier();
        static const int kFileIdentifierFieldNumber = 1;
        const std::string& fileidentifier() const;
        void set_fileidentifier(const std::string& value);
        void set_fileidentifier(std::string&& value);
        void set_fileidentifier(const char* value);
        void set_fileidentifier(const char* value, size_t size);
        std::string* mutable_fileidentifier();
        std::string* release_fileidentifier();
        void set_allocated_fileidentifier(std::string* fileidentifier);

        // .protobuf.Symbol symbol = 3;
        bool has_symbol() const;
        void clear_symbol();
        static const int kSymbolFieldNumber = 3;
        const ::protobuf::Symbol& symbol() const;
        ::protobuf::Symbol* release_symbol();
        ::protobuf::Symbol* mutable_symbol();
        void set_allocated_symbol(::protobuf::Symbol* symbol);

        // bool isEraseBool = 2;
        void clear_iserasebool();
        static const int kIsEraseBoolFieldNumber = 2;
        bool iserasebool() const;
        void set_iserasebool(bool value);

        // @@protoc_insertion_point(class_scope:protobuf.Message)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileidentifier_;
        ::protobuf::Symbol* symbol_;
        bool iserasebool_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class Symbol :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Symbol) */ {
    public:
        Symbol();
        virtual ~Symbol();

        Symbol(const Symbol& from);
        Symbol(Symbol&& from) noexcept
                : Symbol() {
            *this = ::std::move(from);
        }

        inline Symbol& operator=(const Symbol& from) {
            CopyFrom(from);
            return *this;
        }
        inline Symbol& operator=(Symbol&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        inline bool operator==(const Symbol& from) const {
            if(this->pos_size()==from.pos_size()) {
                bool fieldsEqual = std::equal(this->pos().begin(), this->pos().end(), from.pos().begin());
                if (fieldsEqual) {
                    return true;
                }
            }
            return false;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const Symbol& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Symbol* internal_default_instance() {
            return reinterpret_cast<const Symbol*>(
                    &_Symbol_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                2;

        void Swap(Symbol* other);
        friend void swap(Symbol& a, Symbol& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Symbol* New() const final {
            return CreateMaybeMessage<Symbol>(nullptr);
        }

        Symbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<Symbol>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const Symbol& from);
        void MergeFrom(const Symbol& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Symbol* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.Symbol";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // repeated int32 pos = 6;
        int pos_size() const;
        void clear_pos();
        static const int kPosFieldNumber = 6;
        ::PROTOBUF_NAMESPACE_ID::int32 pos(int index) const;
        void set_pos(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
        void add_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
        pos() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
        mutable_pos();

        // string character = 4;
        void clear_character();
        static const int kCharacterFieldNumber = 4;
        const std::string& character() const;
        void set_character(const std::string& value);
        void set_character(std::string&& value);
        void set_character(const char* value);
        void set_character(const char* value, size_t size);
        std::string* mutable_character();
        std::string* release_character();
        void set_allocated_character(std::string* character);

        // string uniqueId = 5;
        void clear_uniqueid();
        static const int kUniqueIdFieldNumber = 5;
        const std::string& uniqueid() const;
        void set_uniqueid(const std::string& value);
        void set_uniqueid(std::string&& value);
        void set_uniqueid(const char* value);
        void set_uniqueid(const char* value, size_t size);
        std::string* mutable_uniqueid();
        std::string* release_uniqueid();
        void set_allocated_uniqueid(std::string* uniqueid);

        // string color = 27;
        void clear_color();
        static const int kColorFieldNumber = 27;
        const std::string& color() const;
        void set_color(const std::string& value);
        void set_color(std::string&& value);
        void set_color(const char* value);
        void set_color(const char* value, size_t size);
        std::string* mutable_color();
        std::string* release_color();
        void set_allocated_color(std::string* color);

        // string font = 29;
        void clear_font();
        static const int kFontFieldNumber = 29;
        const std::string& font() const;
        void set_font(const std::string& value);
        void set_font(std::string&& value);
        void set_font(const char* value);
        void set_font(const char* value, size_t size);
        std::string* mutable_font();
        std::string* release_font();
        void set_allocated_font(std::string* font);

        // string allineamento = 31;
        void clear_allineamento();
        static const int kAllineamentoFieldNumber = 31;
        const std::string& allineamento() const;
        void set_allineamento(const std::string& value);
        void set_allineamento(std::string&& value);
        void set_allineamento(const char* value);
        void set_allineamento(const char* value, size_t size);
        std::string* mutable_allineamento();
        std::string* release_allineamento();
        void set_allocated_allineamento(std::string* allineamento);

        // bool bold = 23;
        void clear_bold();
        static const int kBoldFieldNumber = 23;
        bool bold() const;
        void set_bold(bool value);

        // bool underline = 24;
        void clear_underline();
        static const int kUnderlineFieldNumber = 24;
        bool underline() const;
        void set_underline(bool value);

        // bool italic = 25;
        void clear_italic();
        static const int kItalicFieldNumber = 25;
        bool italic() const;
        void set_italic(bool value);

        // int32 dimension = 26;
        void clear_dimension();
        static const int kDimensionFieldNumber = 26;
        ::PROTOBUF_NAMESPACE_ID::int32 dimension() const;
        void set_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);

        // @@protoc_insertion_point(class_scope:protobuf.Symbol)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pos_;
        mutable std::atomic<int> _pos_cached_byte_size_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allineamento_;
        bool bold_;
        bool underline_;
        bool italic_;
        ::PROTOBUF_NAMESPACE_ID::int32 dimension_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class FileName :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.FileName) */ {
    public:
        FileName();
        virtual ~FileName();

        FileName(const FileName& from);
        FileName(FileName&& from) noexcept
                : FileName() {
            *this = ::std::move(from);
        }

        inline FileName& operator=(const FileName& from) {
            CopyFrom(from);
            return *this;
        }
        inline FileName& operator=(FileName&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const FileName& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const FileName* internal_default_instance() {
            return reinterpret_cast<const FileName*>(
                    &_FileName_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                3;

        void Swap(FileName* other);
        friend void swap(FileName& a, FileName& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline FileName* New() const final {
            return CreateMaybeMessage<FileName>(nullptr);
        }

        FileName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<FileName>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const FileName& from);
        void MergeFrom(const FileName& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(FileName* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.FileName";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string fileName = 7;
        void clear_filename();
        static const int kFileNameFieldNumber = 7;
        const std::string& filename() const;
        void set_filename(const std::string& value);
        void set_filename(std::string&& value);
        void set_filename(const char* value);
        void set_filename(const char* value, size_t size);
        std::string* mutable_filename();
        std::string* release_filename();
        void set_allocated_filename(std::string* filename);

        // @@protoc_insertion_point(class_scope:protobuf.FileName)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class Chunk :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.Chunk) */ {
    public:
        Chunk();
        virtual ~Chunk();

        Chunk(const Chunk& from);
        Chunk(Chunk&& from) noexcept
                : Chunk() {
            *this = ::std::move(from);
        }

        inline Chunk& operator=(const Chunk& from) {
            CopyFrom(from);
            return *this;
        }
        inline Chunk& operator=(Chunk&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const Chunk& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Chunk* internal_default_instance() {
            return reinterpret_cast<const Chunk*>(
                    &_Chunk_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                4;

        void Swap(Chunk* other);
        friend void swap(Chunk& a, Chunk& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Chunk* New() const final {
            return CreateMaybeMessage<Chunk>(nullptr);
        }

        Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<Chunk>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const Chunk& from);
        void MergeFrom(const Chunk& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Chunk* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.Chunk";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // bytes chunk = 8;
        void clear_chunk();
        static const int kChunkFieldNumber = 8;
        const std::string& chunk() const;
        void set_chunk(const std::string& value);
        void set_chunk(std::string&& value);
        void set_chunk(const char* value);
        void set_chunk(const void* value, size_t size);
        std::string* mutable_chunk();
        std::string* release_chunk();
        void set_allocated_chunk(std::string* chunk);

        // int32 size = 60;
        void clear_size();
        static const int kSizeFieldNumber = 60;
        ::PROTOBUF_NAMESPACE_ID::int32 size() const;
        void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

        // @@protoc_insertion_point(class_scope:protobuf.Chunk)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
        ::PROTOBUF_NAMESPACE_ID::int32 size_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class FileInfo :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.FileInfo) */ {
    public:
        FileInfo();
        virtual ~FileInfo();

        FileInfo(const FileInfo& from);
        FileInfo(FileInfo&& from) noexcept
                : FileInfo() {
            *this = ::std::move(from);
        }

        inline FileInfo& operator=(const FileInfo& from) {
            CopyFrom(from);
            return *this;
        }
        inline FileInfo& operator=(FileInfo&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const FileInfo& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const FileInfo* internal_default_instance() {
            return reinterpret_cast<const FileInfo*>(
                    &_FileInfo_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                5;

        void Swap(FileInfo* other);
        friend void swap(FileInfo& a, FileInfo& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline FileInfo* New() const final {
            return CreateMaybeMessage<FileInfo>(nullptr);
        }

        FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<FileInfo>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const FileInfo& from);
        void MergeFrom(const FileInfo& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(FileInfo* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.FileInfo";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // repeated string emailAL = 12;
        int emailal_size() const;
        void clear_emailal();
        static const int kEmailALFieldNumber = 12;
        const std::string& emailal(int index) const;
        std::string* mutable_emailal(int index);
        void set_emailal(int index, const std::string& value);
        void set_emailal(int index, std::string&& value);
        void set_emailal(int index, const char* value);
        void set_emailal(int index, const char* value, size_t size);
        std::string* add_emailal();
        void add_emailal(const std::string& value);
        void add_emailal(std::string&& value);
        void add_emailal(const char* value);
        void add_emailal(const char* value, size_t size);
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& emailal() const;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_emailal();

        // string filename = 9;
        void clear_filename();
        static const int kFilenameFieldNumber = 9;
        const std::string& filename() const;
        void set_filename(const std::string& value);
        void set_filename(std::string&& value);
        void set_filename(const char* value);
        void set_filename(const char* value, size_t size);
        std::string* mutable_filename();
        std::string* release_filename();
        void set_allocated_filename(std::string* filename);

        // string emailO = 11;
        void clear_emailo();
        static const int kEmailOFieldNumber = 11;
        const std::string& emailo() const;
        void set_emailo(const std::string& value);
        void set_emailo(std::string&& value);
        void set_emailo(const char* value);
        void set_emailo(const char* value, size_t size);
        std::string* mutable_emailo();
        std::string* release_emailo();
        void set_allocated_emailo(std::string* emailo);

        // string date = 22;
        void clear_date();
        static const int kDateFieldNumber = 22;
        const std::string& date() const;
        void set_date(const std::string& value);
        void set_date(std::string&& value);
        void set_date(const char* value);
        void set_date(const char* value, size_t size);
        std::string* mutable_date();
        std::string* release_date();
        void set_allocated_date(std::string* date);

        // string fileIdentifier = 70;
        void clear_fileidentifier();
        static const int kFileIdentifierFieldNumber = 70;
        const std::string& fileidentifier() const;
        void set_fileidentifier(const std::string& value);
        void set_fileidentifier(std::string&& value);
        void set_fileidentifier(const char* value);
        void set_fileidentifier(const char* value, size_t size);
        std::string* mutable_fileidentifier();
        std::string* release_fileidentifier();
        void set_allocated_fileidentifier(std::string* fileidentifier);

        // int32 size = 10;
        void clear_size();
        static const int kSizeFieldNumber = 10;
        ::PROTOBUF_NAMESPACE_ID::int32 size() const;
        void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

        // @@protoc_insertion_point(class_scope:protobuf.FileInfo)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> emailal_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emailo_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileidentifier_;
        ::PROTOBUF_NAMESPACE_ID::int32 size_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class FilesInfoList :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.FilesInfoList) */ {
    public:
        FilesInfoList();
        virtual ~FilesInfoList();

        FilesInfoList(const FilesInfoList& from);
        FilesInfoList(FilesInfoList&& from) noexcept
                : FilesInfoList() {
            *this = ::std::move(from);
        }

        inline FilesInfoList& operator=(const FilesInfoList& from) {
            CopyFrom(from);
            return *this;
        }
        inline FilesInfoList& operator=(FilesInfoList&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const FilesInfoList& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const FilesInfoList* internal_default_instance() {
            return reinterpret_cast<const FilesInfoList*>(
                    &_FilesInfoList_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                6;

        void Swap(FilesInfoList* other);
        friend void swap(FilesInfoList& a, FilesInfoList& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline FilesInfoList* New() const final {
            return CreateMaybeMessage<FilesInfoList>(nullptr);
        }

        FilesInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<FilesInfoList>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const FilesInfoList& from);
        void MergeFrom(const FilesInfoList& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(FilesInfoList* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.FilesInfoList";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // repeated .protobuf.FileInfo fileIL = 13;
        int fileil_size() const;
        void clear_fileil();
        static const int kFileILFieldNumber = 13;
        ::protobuf::FileInfo* mutable_fileil(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::FileInfo >*
        mutable_fileil();
        const ::protobuf::FileInfo& fileil(int index) const;
        ::protobuf::FileInfo* add_fileil();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::FileInfo >&
        fileil() const;

        // @@protoc_insertion_point(class_scope:protobuf.FilesInfoList)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::FileInfo > fileil_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class User :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.User) */ {
    public:
        User();
        virtual ~User();

        User(const User& from);
        User(User&& from) noexcept
                : User() {
            *this = ::std::move(from);
        }

        inline User& operator=(const User& from) {
            CopyFrom(from);
            return *this;
        }
        inline User& operator=(User&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const User& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const User* internal_default_instance() {
            return reinterpret_cast<const User*>(
                    &_User_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                7;

        void Swap(User* other);
        friend void swap(User& a, User& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline User* New() const final {
            return CreateMaybeMessage<User>(nullptr);
        }

        User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<User>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const User& from);
        void MergeFrom(const User& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(User* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.User";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string email = 14;
        void clear_email();
        static const int kEmailFieldNumber = 14;
        const std::string& email() const;
        void set_email(const std::string& value);
        void set_email(std::string&& value);
        void set_email(const char* value);
        void set_email(const char* value, size_t size);
        std::string* mutable_email();
        std::string* release_email();
        void set_allocated_email(std::string* email);

        // string password = 15;
        void clear_password();
        static const int kPasswordFieldNumber = 15;
        const std::string& password() const;
        void set_password(const std::string& value);
        void set_password(std::string&& value);
        void set_password(const char* value);
        void set_password(const char* value, size_t size);
        std::string* mutable_password();
        std::string* release_password();
        void set_allocated_password(std::string* password);

        // string passwordR = 16;
        void clear_passwordr();
        static const int kPasswordRFieldNumber = 16;
        const std::string& passwordr() const;
        void set_passwordr(const std::string& value);
        void set_passwordr(std::string&& value);
        void set_passwordr(const char* value);
        void set_passwordr(const char* value, size_t size);
        std::string* mutable_passwordr();
        std::string* release_passwordr();
        void set_allocated_passwordr(std::string* passwordr);

        // @@protoc_insertion_point(class_scope:protobuf.User)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwordr_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class UserLogged :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.UserLogged) */ {
    public:
        UserLogged();
        virtual ~UserLogged();

        UserLogged(const UserLogged& from);
        UserLogged(UserLogged&& from) noexcept
                : UserLogged() {
            *this = ::std::move(from);
        }

        inline UserLogged& operator=(const UserLogged& from) {
            CopyFrom(from);
            return *this;
        }
        inline UserLogged& operator=(UserLogged&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const UserLogged& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const UserLogged* internal_default_instance() {
            return reinterpret_cast<const UserLogged*>(
                    &_UserLogged_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                8;

        void Swap(UserLogged* other);
        friend void swap(UserLogged& a, UserLogged& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline UserLogged* New() const final {
            return CreateMaybeMessage<UserLogged>(nullptr);
        }

        UserLogged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<UserLogged>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const UserLogged& from);
        void MergeFrom(const UserLogged& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(UserLogged* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.UserLogged";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string token = 17;
        void clear_token();
        static const int kTokenFieldNumber = 17;
        const std::string& token() const;
        void set_token(const std::string& value);
        void set_token(std::string&& value);
        void set_token(const char* value);
        void set_token(const char* value, size_t size);
        std::string* mutable_token();
        std::string* release_token();
        void set_allocated_token(std::string* token);

        // .protobuf.ProfileInfo profileInfo = 60;
        bool has_profileinfo() const;
        void clear_profileinfo();
        static const int kProfileInfoFieldNumber = 60;
        const ::protobuf::ProfileInfo& profileinfo() const;
        ::protobuf::ProfileInfo* release_profileinfo();
        ::protobuf::ProfileInfo* mutable_profileinfo();
        void set_allocated_profileinfo(::protobuf::ProfileInfo* profileinfo);

        // @@protoc_insertion_point(class_scope:protobuf.UserLogged)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
        ::protobuf::ProfileInfo* profileinfo_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class ProfileInfo :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ProfileInfo) */ {
    public:
        ProfileInfo();
        virtual ~ProfileInfo();

        ProfileInfo(const ProfileInfo& from);
        ProfileInfo(ProfileInfo&& from) noexcept
                : ProfileInfo() {
            *this = ::std::move(from);
        }

        inline ProfileInfo& operator=(const ProfileInfo& from) {
            CopyFrom(from);
            return *this;
        }
        inline ProfileInfo& operator=(ProfileInfo&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const ProfileInfo& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const ProfileInfo* internal_default_instance() {
            return reinterpret_cast<const ProfileInfo*>(
                    &_ProfileInfo_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                9;

        void Swap(ProfileInfo* other);
        friend void swap(ProfileInfo& a, ProfileInfo& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline ProfileInfo* New() const final {
            return CreateMaybeMessage<ProfileInfo>(nullptr);
        }

        ProfileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<ProfileInfo>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const ProfileInfo& from);
        void MergeFrom(const ProfileInfo& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ProfileInfo* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.ProfileInfo";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string username = 18;
        void clear_username();
        static const int kUsernameFieldNumber = 18;
        const std::string& username() const;
        void set_username(const std::string& value);
        void set_username(std::string&& value);
        void set_username(const char* value);
        void set_username(const char* value, size_t size);
        std::string* mutable_username();
        std::string* release_username();
        void set_allocated_username(std::string* username);

        // string name = 19;
        void clear_name();
        static const int kNameFieldNumber = 19;
        const std::string& name() const;
        void set_name(const std::string& value);
        void set_name(std::string&& value);
        void set_name(const char* value);
        void set_name(const char* value, size_t size);
        std::string* mutable_name();
        std::string* release_name();
        void set_allocated_name(std::string* name);

        // string surname = 20;
        void clear_surname();
        static const int kSurnameFieldNumber = 20;
        const std::string& surname() const;
        void set_surname(const std::string& value);
        void set_surname(std::string&& value);
        void set_surname(const char* value);
        void set_surname(const char* value, size_t size);
        std::string* mutable_surname();
        std::string* release_surname();
        void set_allocated_surname(std::string* surname);

        // .protobuf.User user = 21;
        bool has_user() const;
        void clear_user();
        static const int kUserFieldNumber = 21;
        const ::protobuf::User& user() const;
        ::protobuf::User* release_user();
        ::protobuf::User* mutable_user();
        void set_allocated_user(::protobuf::User* user);

        // @@protoc_insertion_point(class_scope:protobuf.ProfileInfo)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
        ::protobuf::User* user_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class UserMap_UserMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserMap_UserMapEntry_DoNotUse,
            std::string, ::protobuf::ProfileInfo,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
            0 > {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserMap_UserMapEntry_DoNotUse,
                std::string, ::protobuf::ProfileInfo,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
                0 > SuperType;
        UserMap_UserMapEntry_DoNotUse();
        UserMap_UserMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const UserMap_UserMapEntry_DoNotUse& other);
        static const UserMap_UserMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserMap_UserMapEntry_DoNotUse*>(&_UserMap_UserMapEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.UserMap.UserMapEntry.key");
        }
        static bool ValidateValue(void*) { return true; }
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[10];
        }

    public:
    };

// -------------------------------------------------------------------

    class UserMap :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.UserMap) */ {
    public:
        UserMap();
        virtual ~UserMap();

        UserMap(const UserMap& from);
        UserMap(UserMap&& from) noexcept
                : UserMap() {
            *this = ::std::move(from);
        }

        inline UserMap& operator=(const UserMap& from) {
            CopyFrom(from);
            return *this;
        }
        inline UserMap& operator=(UserMap&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const UserMap& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const UserMap* internal_default_instance() {
            return reinterpret_cast<const UserMap*>(
                    &_UserMap_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                11;

        void Swap(UserMap* other);
        friend void swap(UserMap& a, UserMap& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline UserMap* New() const final {
            return CreateMaybeMessage<UserMap>(nullptr);
        }

        UserMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<UserMap>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const UserMap& from);
        void MergeFrom(const UserMap& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(UserMap* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.UserMap";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------


        // accessors -------------------------------------------------------

        // map<string, .protobuf.ProfileInfo> userMap = 30;
        int usermap_size() const;
        void clear_usermap();
        static const int kUserMapFieldNumber = 30;
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::ProfileInfo >&
        usermap() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::ProfileInfo >*
        mutable_usermap();

        // @@protoc_insertion_point(class_scope:protobuf.UserMap)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                UserMap_UserMapEntry_DoNotUse,
                std::string, ::protobuf::ProfileInfo,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
                0 > usermap_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class FileClientMap_FileClientMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileClientMap_FileClientMapEntry_DoNotUse,
            std::string, ::protobuf::FilesInfoList,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
            0 > {
    public:
        typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileClientMap_FileClientMapEntry_DoNotUse,
                std::string, ::protobuf::FilesInfoList,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
                0 > SuperType;
        FileClientMap_FileClientMapEntry_DoNotUse();
        FileClientMap_FileClientMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
        void MergeFrom(const FileClientMap_FileClientMapEntry_DoNotUse& other);
        static const FileClientMap_FileClientMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileClientMap_FileClientMapEntry_DoNotUse*>(&_FileClientMap_FileClientMapEntry_DoNotUse_default_instance_); }
        static bool ValidateKey(std::string* s) {
            return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf.FileClientMap.FileClientMapEntry.key");
        }
        static bool ValidateValue(void*) { return true; }
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[12];
        }

    public:
    };

// -------------------------------------------------------------------

    class FileClientMap :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.FileClientMap) */ {
    public:
        FileClientMap();
        virtual ~FileClientMap();

        FileClientMap(const FileClientMap& from);
        FileClientMap(FileClientMap&& from) noexcept
                : FileClientMap() {
            *this = ::std::move(from);
        }

        inline FileClientMap& operator=(const FileClientMap& from) {
            CopyFrom(from);
            return *this;
        }
        inline FileClientMap& operator=(FileClientMap&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const FileClientMap& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const FileClientMap* internal_default_instance() {
            return reinterpret_cast<const FileClientMap*>(
                    &_FileClientMap_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                13;

        void Swap(FileClientMap* other);
        friend void swap(FileClientMap& a, FileClientMap& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline FileClientMap* New() const final {
            return CreateMaybeMessage<FileClientMap>(nullptr);
        }

        FileClientMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<FileClientMap>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const FileClientMap& from);
        void MergeFrom(const FileClientMap& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(FileClientMap* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.FileClientMap";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------


        // accessors -------------------------------------------------------

        // map<string, .protobuf.FilesInfoList> fileClientMap = 43;
        int fileclientmap_size() const;
        void clear_fileclientmap();
        static const int kFileClientMapFieldNumber = 43;
        const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::FilesInfoList >&
        fileclientmap() const;
        ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::FilesInfoList >*
        mutable_fileclientmap();

        // @@protoc_insertion_point(class_scope:protobuf.FileClientMap)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::internal::MapField<
                FileClientMap_FileClientMapEntry_DoNotUse,
                std::string, ::protobuf::FilesInfoList,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
                0 > fileclientmap_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// -------------------------------------------------------------------

    class SymbolVector :
            public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.SymbolVector) */ {
    public:
        SymbolVector();
        virtual ~SymbolVector();

        SymbolVector(const SymbolVector& from);
        SymbolVector(SymbolVector&& from) noexcept
                : SymbolVector() {
            *this = ::std::move(from);
        }

        inline SymbolVector& operator=(const SymbolVector& from) {
            CopyFrom(from);
            return *this;
        }
        inline SymbolVector& operator=(SymbolVector&& from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return GetMetadataStatic().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return GetMetadataStatic().reflection;
        }
        static const SymbolVector& default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const SymbolVector* internal_default_instance() {
            return reinterpret_cast<const SymbolVector*>(
                    &_SymbolVector_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
                14;

        void Swap(SymbolVector* other);
        friend void swap(SymbolVector& a, SymbolVector& b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline SymbolVector* New() const final {
            return CreateMaybeMessage<SymbolVector>(nullptr);
        }

        SymbolVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
            return CreateMaybeMessage<SymbolVector>(arena);
        }
        void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
        void CopyFrom(const SymbolVector& from);
        void MergeFrom(const SymbolVector& from);
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
        bool MergePartialFromCodedStream(
                ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
        void SerializeWithCachedSizes(
                ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
        ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
                ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        inline void SharedCtor();
        inline void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(SymbolVector* other);
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "protobuf.SymbolVector";
        }
    private:
        inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
            return nullptr;
        }
        inline void* MaybeArenaPtr() const {
            return nullptr;
        }
    public:

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
    private:
        static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messageP_2eproto);
            return ::descriptor_table_messageP_2eproto.file_level_metadata[kIndexInFileMessages];
        }

    public:

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // repeated .protobuf.Symbol symbolVector = 50;
        int symbolvector_size() const;
        void clear_symbolvector();
        static const int kSymbolVectorFieldNumber = 50;
        ::protobuf::Symbol* mutable_symbolvector(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Symbol >*
        mutable_symbolvector();
        const ::protobuf::Symbol& symbolvector(int index) const;
        ::protobuf::Symbol* add_symbolvector();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Symbol >&
        symbolvector() const;

        // @@protoc_insertion_point(class_scope:protobuf.SymbolVector)
    private:
        class HasBitSetters;

        ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Symbol > symbolvector_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_messageP_2eproto;
    };
// ===================================================================


// ===================================================================

#ifdef __GNUC__
    #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Message

// string fileIdentifier = 1;
    inline void Message::clear_fileidentifier() {
        fileidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Message::fileidentifier() const {
        // @@protoc_insertion_point(field_get:protobuf.Message.fileIdentifier)
        return fileidentifier_.GetNoArena();
    }
    inline void Message::set_fileidentifier(const std::string& value) {

        fileidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Message.fileIdentifier)
    }
    inline void Message::set_fileidentifier(std::string&& value) {

        fileidentifier_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Message.fileIdentifier)
    }
    inline void Message::set_fileidentifier(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        fileidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Message.fileIdentifier)
    }
    inline void Message::set_fileidentifier(const char* value, size_t size) {

        fileidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                   ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Message.fileIdentifier)
    }
    inline std::string* Message::mutable_fileidentifier() {

        // @@protoc_insertion_point(field_mutable:protobuf.Message.fileIdentifier)
        return fileidentifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Message::release_fileidentifier() {
        // @@protoc_insertion_point(field_release:protobuf.Message.fileIdentifier)

        return fileidentifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Message::set_allocated_fileidentifier(std::string* fileidentifier) {
        if (fileidentifier != nullptr) {

        } else {

        }
        fileidentifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileidentifier);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Message.fileIdentifier)
    }

// bool isEraseBool = 2;
    inline void Message::clear_iserasebool() {
        iserasebool_ = false;
    }
    inline bool Message::iserasebool() const {
        // @@protoc_insertion_point(field_get:protobuf.Message.isEraseBool)
        return iserasebool_;
    }
    inline void Message::set_iserasebool(bool value) {

        iserasebool_ = value;
        // @@protoc_insertion_point(field_set:protobuf.Message.isEraseBool)
    }

// .protobuf.Symbol symbol = 3;
    inline bool Message::has_symbol() const {
        return this != internal_default_instance() && symbol_ != nullptr;
    }
    inline void Message::clear_symbol() {
        if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
            delete symbol_;
        }
        symbol_ = nullptr;
    }
    inline const ::protobuf::Symbol& Message::symbol() const {
        const ::protobuf::Symbol* p = symbol_;
        // @@protoc_insertion_point(field_get:protobuf.Message.symbol)
        return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::Symbol*>(
                &::protobuf::_Symbol_default_instance_);
    }
    inline ::protobuf::Symbol* Message::release_symbol() {
        // @@protoc_insertion_point(field_release:protobuf.Message.symbol)

        ::protobuf::Symbol* temp = symbol_;
        symbol_ = nullptr;
        return temp;
    }
    inline ::protobuf::Symbol* Message::mutable_symbol() {

        if (symbol_ == nullptr) {
            auto* p = CreateMaybeMessage<::protobuf::Symbol>(GetArenaNoVirtual());
            symbol_ = p;
        }
        // @@protoc_insertion_point(field_mutable:protobuf.Message.symbol)
        return symbol_;
    }
    inline void Message::set_allocated_symbol(::protobuf::Symbol* symbol) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
        if (message_arena == nullptr) {
            delete symbol_;
        }
        if (symbol) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
            if (message_arena != submessage_arena) {
                symbol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                        message_arena, symbol, submessage_arena);
            }

        } else {

        }
        symbol_ = symbol;
        // @@protoc_insertion_point(field_set_allocated:protobuf.Message.symbol)
    }

// -------------------------------------------------------------------

// Symbol

// string character = 4;
    inline void Symbol::clear_character() {
        character_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Symbol::character() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.character)
        return character_.GetNoArena();
    }
    inline void Symbol::set_character(const std::string& value) {

        character_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Symbol.character)
    }
    inline void Symbol::set_character(std::string&& value) {

        character_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Symbol.character)
    }
    inline void Symbol::set_character(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        character_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Symbol.character)
    }
    inline void Symbol::set_character(const char* value, size_t size) {

        character_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                              ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Symbol.character)
    }
    inline std::string* Symbol::mutable_character() {

        // @@protoc_insertion_point(field_mutable:protobuf.Symbol.character)
        return character_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Symbol::release_character() {
        // @@protoc_insertion_point(field_release:protobuf.Symbol.character)

        return character_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Symbol::set_allocated_character(std::string* character) {
        if (character != nullptr) {

        } else {

        }
        character_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Symbol.character)
    }

// string uniqueId = 5;
    inline void Symbol::clear_uniqueid() {
        uniqueid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Symbol::uniqueid() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.uniqueId)
        return uniqueid_.GetNoArena();
    }
    inline void Symbol::set_uniqueid(const std::string& value) {

        uniqueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Symbol.uniqueId)
    }
    inline void Symbol::set_uniqueid(std::string&& value) {

        uniqueid_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Symbol.uniqueId)
    }
    inline void Symbol::set_uniqueid(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        uniqueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Symbol.uniqueId)
    }
    inline void Symbol::set_uniqueid(const char* value, size_t size) {

        uniqueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Symbol.uniqueId)
    }
    inline std::string* Symbol::mutable_uniqueid() {

        // @@protoc_insertion_point(field_mutable:protobuf.Symbol.uniqueId)
        return uniqueid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Symbol::release_uniqueid() {
        // @@protoc_insertion_point(field_release:protobuf.Symbol.uniqueId)

        return uniqueid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Symbol::set_allocated_uniqueid(std::string* uniqueid) {
        if (uniqueid != nullptr) {

        } else {

        }
        uniqueid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueid);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Symbol.uniqueId)
    }

// repeated int32 pos = 6;
    inline int Symbol::pos_size() const {
        return pos_.size();
    }
    inline void Symbol::clear_pos() {
        pos_.Clear();
    }
    inline ::PROTOBUF_NAMESPACE_ID::int32 Symbol::pos(int index) const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.pos)
        return pos_.Get(index);
    }
    inline void Symbol::set_pos(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
        pos_.Set(index, value);
        // @@protoc_insertion_point(field_set:protobuf.Symbol.pos)
    }
    inline void Symbol::add_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
        pos_.Add(value);
        // @@protoc_insertion_point(field_add:protobuf.Symbol.pos)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
    Symbol::pos() const {
        // @@protoc_insertion_point(field_list:protobuf.Symbol.pos)
        return pos_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
    Symbol::mutable_pos() {
        // @@protoc_insertion_point(field_mutable_list:protobuf.Symbol.pos)
        return &pos_;
    }

// bool bold = 23;
    inline void Symbol::clear_bold() {
        bold_ = false;
    }
    inline bool Symbol::bold() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.bold)
        return bold_;
    }
    inline void Symbol::set_bold(bool value) {

        bold_ = value;
        // @@protoc_insertion_point(field_set:protobuf.Symbol.bold)
    }

// bool underline = 24;
    inline void Symbol::clear_underline() {
        underline_ = false;
    }
    inline bool Symbol::underline() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.underline)
        return underline_;
    }
    inline void Symbol::set_underline(bool value) {

        underline_ = value;
        // @@protoc_insertion_point(field_set:protobuf.Symbol.underline)
    }

// bool italic = 25;
    inline void Symbol::clear_italic() {
        italic_ = false;
    }
    inline bool Symbol::italic() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.italic)
        return italic_;
    }
    inline void Symbol::set_italic(bool value) {

        italic_ = value;
        // @@protoc_insertion_point(field_set:protobuf.Symbol.italic)
    }

// int32 dimension = 26;
    inline void Symbol::clear_dimension() {
        dimension_ = 0;
    }
    inline ::PROTOBUF_NAMESPACE_ID::int32 Symbol::dimension() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.dimension)
        return dimension_;
    }
    inline void Symbol::set_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {

        dimension_ = value;
        // @@protoc_insertion_point(field_set:protobuf.Symbol.dimension)
    }

// string color = 27;
    inline void Symbol::clear_color() {
        color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Symbol::color() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.color)
        return color_.GetNoArena();
    }
    inline void Symbol::set_color(const std::string& value) {

        color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Symbol.color)
    }
    inline void Symbol::set_color(std::string&& value) {

        color_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Symbol.color)
    }
    inline void Symbol::set_color(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Symbol.color)
    }
    inline void Symbol::set_color(const char* value, size_t size) {

        color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Symbol.color)
    }
    inline std::string* Symbol::mutable_color() {

        // @@protoc_insertion_point(field_mutable:protobuf.Symbol.color)
        return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Symbol::release_color() {
        // @@protoc_insertion_point(field_release:protobuf.Symbol.color)

        return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Symbol::set_allocated_color(std::string* color) {
        if (color != nullptr) {

        } else {

        }
        color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Symbol.color)
    }

// string font = 29;
    inline void Symbol::clear_font() {
        font_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Symbol::font() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.font)
        return font_.GetNoArena();
    }
    inline void Symbol::set_font(const std::string& value) {

        font_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Symbol.font)
    }
    inline void Symbol::set_font(std::string&& value) {

        font_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Symbol.font)
    }
    inline void Symbol::set_font(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        font_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Symbol.font)
    }
    inline void Symbol::set_font(const char* value, size_t size) {

        font_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Symbol.font)
    }
    inline std::string* Symbol::mutable_font() {

        // @@protoc_insertion_point(field_mutable:protobuf.Symbol.font)
        return font_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Symbol::release_font() {
        // @@protoc_insertion_point(field_release:protobuf.Symbol.font)

        return font_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Symbol::set_allocated_font(std::string* font) {
        if (font != nullptr) {

        } else {

        }
        font_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Symbol.font)
    }

// string allineamento = 31;
    inline void Symbol::clear_allineamento() {
        allineamento_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Symbol::allineamento() const {
        // @@protoc_insertion_point(field_get:protobuf.Symbol.allineamento)
        return allineamento_.GetNoArena();
    }
    inline void Symbol::set_allineamento(const std::string& value) {

        allineamento_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Symbol.allineamento)
    }
    inline void Symbol::set_allineamento(std::string&& value) {

        allineamento_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Symbol.allineamento)
    }
    inline void Symbol::set_allineamento(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        allineamento_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Symbol.allineamento)
    }
    inline void Symbol::set_allineamento(const char* value, size_t size) {

        allineamento_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                 ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Symbol.allineamento)
    }
    inline std::string* Symbol::mutable_allineamento() {

        // @@protoc_insertion_point(field_mutable:protobuf.Symbol.allineamento)
        return allineamento_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Symbol::release_allineamento() {
        // @@protoc_insertion_point(field_release:protobuf.Symbol.allineamento)

        return allineamento_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Symbol::set_allocated_allineamento(std::string* allineamento) {
        if (allineamento != nullptr) {

        } else {

        }
        allineamento_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allineamento);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Symbol.allineamento)
    }

// -------------------------------------------------------------------

// FileName

// string fileName = 7;
    inline void FileName::clear_filename() {
        filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& FileName::filename() const {
        // @@protoc_insertion_point(field_get:protobuf.FileName.fileName)
        return filename_.GetNoArena();
    }
    inline void FileName::set_filename(const std::string& value) {

        filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.FileName.fileName)
    }
    inline void FileName::set_filename(std::string&& value) {

        filename_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.FileName.fileName)
    }
    inline void FileName::set_filename(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.FileName.fileName)
    }
    inline void FileName::set_filename(const char* value, size_t size) {

        filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.FileName.fileName)
    }
    inline std::string* FileName::mutable_filename() {

        // @@protoc_insertion_point(field_mutable:protobuf.FileName.fileName)
        return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* FileName::release_filename() {
        // @@protoc_insertion_point(field_release:protobuf.FileName.fileName)

        return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void FileName::set_allocated_filename(std::string* filename) {
        if (filename != nullptr) {

        } else {

        }
        filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
        // @@protoc_insertion_point(field_set_allocated:protobuf.FileName.fileName)
    }

// -------------------------------------------------------------------

// Chunk

// bytes chunk = 8;
    inline void Chunk::clear_chunk() {
        chunk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& Chunk::chunk() const {
        // @@protoc_insertion_point(field_get:protobuf.Chunk.chunk)
        return chunk_.GetNoArena();
    }
    inline void Chunk::set_chunk(const std::string& value) {

        chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.Chunk.chunk)
    }
    inline void Chunk::set_chunk(std::string&& value) {

        chunk_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.Chunk.chunk)
    }
    inline void Chunk::set_chunk(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.Chunk.chunk)
    }
    inline void Chunk::set_chunk(const void* value, size_t size) {

        chunk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.Chunk.chunk)
    }
    inline std::string* Chunk::mutable_chunk() {

        // @@protoc_insertion_point(field_mutable:protobuf.Chunk.chunk)
        return chunk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* Chunk::release_chunk() {
        // @@protoc_insertion_point(field_release:protobuf.Chunk.chunk)

        return chunk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void Chunk::set_allocated_chunk(std::string* chunk) {
        if (chunk != nullptr) {

        } else {

        }
        chunk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk);
        // @@protoc_insertion_point(field_set_allocated:protobuf.Chunk.chunk)
    }

// int32 size = 60;
    inline void Chunk::clear_size() {
        size_ = 0;
    }
    inline ::PROTOBUF_NAMESPACE_ID::int32 Chunk::size() const {
        // @@protoc_insertion_point(field_get:protobuf.Chunk.size)
        return size_;
    }
    inline void Chunk::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {

        size_ = value;
        // @@protoc_insertion_point(field_set:protobuf.Chunk.size)
    }

// -------------------------------------------------------------------

// FileInfo

// string filename = 9;
    inline void FileInfo::clear_filename() {
        filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& FileInfo::filename() const {
        // @@protoc_insertion_point(field_get:protobuf.FileInfo.filename)
        return filename_.GetNoArena();
    }
    inline void FileInfo::set_filename(const std::string& value) {

        filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.filename)
    }
    inline void FileInfo::set_filename(std::string&& value) {

        filename_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.FileInfo.filename)
    }
    inline void FileInfo::set_filename(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.FileInfo.filename)
    }
    inline void FileInfo::set_filename(const char* value, size_t size) {

        filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.FileInfo.filename)
    }
    inline std::string* FileInfo::mutable_filename() {

        // @@protoc_insertion_point(field_mutable:protobuf.FileInfo.filename)
        return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* FileInfo::release_filename() {
        // @@protoc_insertion_point(field_release:protobuf.FileInfo.filename)

        return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void FileInfo::set_allocated_filename(std::string* filename) {
        if (filename != nullptr) {

        } else {

        }
        filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
        // @@protoc_insertion_point(field_set_allocated:protobuf.FileInfo.filename)
    }

// string date = 22;
    inline void FileInfo::clear_date() {
        date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& FileInfo::date() const {
        // @@protoc_insertion_point(field_get:protobuf.FileInfo.date)
        return date_.GetNoArena();
    }
    inline void FileInfo::set_date(const std::string& value) {

        date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.date)
    }
    inline void FileInfo::set_date(std::string&& value) {

        date_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.FileInfo.date)
    }
    inline void FileInfo::set_date(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.FileInfo.date)
    }
    inline void FileInfo::set_date(const char* value, size_t size) {

        date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.FileInfo.date)
    }
    inline std::string* FileInfo::mutable_date() {

        // @@protoc_insertion_point(field_mutable:protobuf.FileInfo.date)
        return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* FileInfo::release_date() {
        // @@protoc_insertion_point(field_release:protobuf.FileInfo.date)

        return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void FileInfo::set_allocated_date(std::string* date) {
        if (date != nullptr) {

        } else {

        }
        date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
        // @@protoc_insertion_point(field_set_allocated:protobuf.FileInfo.date)
    }

// string fileIdentifier = 70;
    inline void FileInfo::clear_fileidentifier() {
        fileidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& FileInfo::fileidentifier() const {
        // @@protoc_insertion_point(field_get:protobuf.FileInfo.fileIdentifier)
        return fileidentifier_.GetNoArena();
    }
    inline void FileInfo::set_fileidentifier(const std::string& value) {

        fileidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.fileIdentifier)
    }
    inline void FileInfo::set_fileidentifier(std::string&& value) {

        fileidentifier_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.FileInfo.fileIdentifier)
    }
    inline void FileInfo::set_fileidentifier(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        fileidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.FileInfo.fileIdentifier)
    }
    inline void FileInfo::set_fileidentifier(const char* value, size_t size) {

        fileidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                   ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.FileInfo.fileIdentifier)
    }
    inline std::string* FileInfo::mutable_fileidentifier() {

        // @@protoc_insertion_point(field_mutable:protobuf.FileInfo.fileIdentifier)
        return fileidentifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* FileInfo::release_fileidentifier() {
        // @@protoc_insertion_point(field_release:protobuf.FileInfo.fileIdentifier)

        return fileidentifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void FileInfo::set_allocated_fileidentifier(std::string* fileidentifier) {
        if (fileidentifier != nullptr) {

        } else {

        }
        fileidentifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileidentifier);
        // @@protoc_insertion_point(field_set_allocated:protobuf.FileInfo.fileIdentifier)
    }

// int32 size = 10;
    inline void FileInfo::clear_size() {
        size_ = 0;
    }
    inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::size() const {
        // @@protoc_insertion_point(field_get:protobuf.FileInfo.size)
        return size_;
    }
    inline void FileInfo::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {

        size_ = value;
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.size)
    }

// string emailO = 11;
    inline void FileInfo::clear_emailo() {
        emailo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& FileInfo::emailo() const {
        // @@protoc_insertion_point(field_get:protobuf.FileInfo.emailO)
        return emailo_.GetNoArena();
    }
    inline void FileInfo::set_emailo(const std::string& value) {

        emailo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.emailO)
    }
    inline void FileInfo::set_emailo(std::string&& value) {

        emailo_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.FileInfo.emailO)
    }
    inline void FileInfo::set_emailo(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        emailo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.FileInfo.emailO)
    }
    inline void FileInfo::set_emailo(const char* value, size_t size) {

        emailo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                           ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.FileInfo.emailO)
    }
    inline std::string* FileInfo::mutable_emailo() {

        // @@protoc_insertion_point(field_mutable:protobuf.FileInfo.emailO)
        return emailo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* FileInfo::release_emailo() {
        // @@protoc_insertion_point(field_release:protobuf.FileInfo.emailO)

        return emailo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void FileInfo::set_allocated_emailo(std::string* emailo) {
        if (emailo != nullptr) {

        } else {

        }
        emailo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emailo);
        // @@protoc_insertion_point(field_set_allocated:protobuf.FileInfo.emailO)
    }

// repeated string emailAL = 12;
    inline int FileInfo::emailal_size() const {
        return emailal_.size();
    }
    inline void FileInfo::clear_emailal() {
        emailal_.Clear();
    }
    inline const std::string& FileInfo::emailal(int index) const {
        // @@protoc_insertion_point(field_get:protobuf.FileInfo.emailAL)
        return emailal_.Get(index);
    }
    inline std::string* FileInfo::mutable_emailal(int index) {
        // @@protoc_insertion_point(field_mutable:protobuf.FileInfo.emailAL)
        return emailal_.Mutable(index);
    }
    inline void FileInfo::set_emailal(int index, const std::string& value) {
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.emailAL)
        emailal_.Mutable(index)->assign(value);
    }
    inline void FileInfo::set_emailal(int index, std::string&& value) {
        // @@protoc_insertion_point(field_set:protobuf.FileInfo.emailAL)
        emailal_.Mutable(index)->assign(std::move(value));
    }
    inline void FileInfo::set_emailal(int index, const char* value) {
                GOOGLE_DCHECK(value != nullptr);
        emailal_.Mutable(index)->assign(value);
        // @@protoc_insertion_point(field_set_char:protobuf.FileInfo.emailAL)
    }
    inline void FileInfo::set_emailal(int index, const char* value, size_t size) {
        emailal_.Mutable(index)->assign(
                reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_set_pointer:protobuf.FileInfo.emailAL)
    }
    inline std::string* FileInfo::add_emailal() {
        // @@protoc_insertion_point(field_add_mutable:protobuf.FileInfo.emailAL)
        return emailal_.Add();
    }
    inline void FileInfo::add_emailal(const std::string& value) {
        emailal_.Add()->assign(value);
        // @@protoc_insertion_point(field_add:protobuf.FileInfo.emailAL)
    }
    inline void FileInfo::add_emailal(std::string&& value) {
        emailal_.Add(std::move(value));
        // @@protoc_insertion_point(field_add:protobuf.FileInfo.emailAL)
    }
    inline void FileInfo::add_emailal(const char* value) {
                GOOGLE_DCHECK(value != nullptr);
        emailal_.Add()->assign(value);
        // @@protoc_insertion_point(field_add_char:protobuf.FileInfo.emailAL)
    }
    inline void FileInfo::add_emailal(const char* value, size_t size) {
        emailal_.Add()->assign(reinterpret_cast<const char*>(value), size);
        // @@protoc_insertion_point(field_add_pointer:protobuf.FileInfo.emailAL)
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
    FileInfo::emailal() const {
        // @@protoc_insertion_point(field_list:protobuf.FileInfo.emailAL)
        return emailal_;
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
    FileInfo::mutable_emailal() {
        // @@protoc_insertion_point(field_mutable_list:protobuf.FileInfo.emailAL)
        return &emailal_;
    }

// -------------------------------------------------------------------

// FilesInfoList

// repeated .protobuf.FileInfo fileIL = 13;
    inline int FilesInfoList::fileil_size() const {
        return fileil_.size();
    }
    inline void FilesInfoList::clear_fileil() {
        fileil_.Clear();
    }
    inline ::protobuf::FileInfo* FilesInfoList::mutable_fileil(int index) {
        // @@protoc_insertion_point(field_mutable:protobuf.FilesInfoList.fileIL)
        return fileil_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::FileInfo >*
    FilesInfoList::mutable_fileil() {
        // @@protoc_insertion_point(field_mutable_list:protobuf.FilesInfoList.fileIL)
        return &fileil_;
    }
    inline const ::protobuf::FileInfo& FilesInfoList::fileil(int index) const {
        // @@protoc_insertion_point(field_get:protobuf.FilesInfoList.fileIL)
        return fileil_.Get(index);
    }
    inline ::protobuf::FileInfo* FilesInfoList::add_fileil() {
        // @@protoc_insertion_point(field_add:protobuf.FilesInfoList.fileIL)
        return fileil_.Add();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::FileInfo >&
    FilesInfoList::fileil() const {
        // @@protoc_insertion_point(field_list:protobuf.FilesInfoList.fileIL)
        return fileil_;
    }

// -------------------------------------------------------------------

// User

// string email = 14;
    inline void User::clear_email() {
        email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& User::email() const {
        // @@protoc_insertion_point(field_get:protobuf.User.email)
        return email_.GetNoArena();
    }
    inline void User::set_email(const std::string& value) {

        email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.User.email)
    }
    inline void User::set_email(std::string&& value) {

        email_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.User.email)
    }
    inline void User::set_email(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.User.email)
    }
    inline void User::set_email(const char* value, size_t size) {

        email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.User.email)
    }
    inline std::string* User::mutable_email() {

        // @@protoc_insertion_point(field_mutable:protobuf.User.email)
        return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* User::release_email() {
        // @@protoc_insertion_point(field_release:protobuf.User.email)

        return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void User::set_allocated_email(std::string* email) {
        if (email != nullptr) {

        } else {

        }
        email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
        // @@protoc_insertion_point(field_set_allocated:protobuf.User.email)
    }

// string password = 15;
    inline void User::clear_password() {
        password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& User::password() const {
        // @@protoc_insertion_point(field_get:protobuf.User.password)
        return password_.GetNoArena();
    }
    inline void User::set_password(const std::string& value) {

        password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.User.password)
    }
    inline void User::set_password(std::string&& value) {

        password_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.User.password)
    }
    inline void User::set_password(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.User.password)
    }
    inline void User::set_password(const char* value, size_t size) {

        password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.User.password)
    }
    inline std::string* User::mutable_password() {

        // @@protoc_insertion_point(field_mutable:protobuf.User.password)
        return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* User::release_password() {
        // @@protoc_insertion_point(field_release:protobuf.User.password)

        return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void User::set_allocated_password(std::string* password) {
        if (password != nullptr) {

        } else {

        }
        password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
        // @@protoc_insertion_point(field_set_allocated:protobuf.User.password)
    }

// string passwordR = 16;
    inline void User::clear_passwordr() {
        passwordr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& User::passwordr() const {
        // @@protoc_insertion_point(field_get:protobuf.User.passwordR)
        return passwordr_.GetNoArena();
    }
    inline void User::set_passwordr(const std::string& value) {

        passwordr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.User.passwordR)
    }
    inline void User::set_passwordr(std::string&& value) {

        passwordr_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.User.passwordR)
    }
    inline void User::set_passwordr(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        passwordr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.User.passwordR)
    }
    inline void User::set_passwordr(const char* value, size_t size) {

        passwordr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                              ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.User.passwordR)
    }
    inline std::string* User::mutable_passwordr() {

        // @@protoc_insertion_point(field_mutable:protobuf.User.passwordR)
        return passwordr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* User::release_passwordr() {
        // @@protoc_insertion_point(field_release:protobuf.User.passwordR)

        return passwordr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void User::set_allocated_passwordr(std::string* passwordr) {
        if (passwordr != nullptr) {

        } else {

        }
        passwordr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwordr);
        // @@protoc_insertion_point(field_set_allocated:protobuf.User.passwordR)
    }

// -------------------------------------------------------------------

// UserLogged

// string token = 17;
    inline void UserLogged::clear_token() {
        token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& UserLogged::token() const {
        // @@protoc_insertion_point(field_get:protobuf.UserLogged.token)
        return token_.GetNoArena();
    }
    inline void UserLogged::set_token(const std::string& value) {

        token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.UserLogged.token)
    }
    inline void UserLogged::set_token(std::string&& value) {

        token_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.UserLogged.token)
    }
    inline void UserLogged::set_token(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.UserLogged.token)
    }
    inline void UserLogged::set_token(const char* value, size_t size) {

        token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.UserLogged.token)
    }
    inline std::string* UserLogged::mutable_token() {

        // @@protoc_insertion_point(field_mutable:protobuf.UserLogged.token)
        return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* UserLogged::release_token() {
        // @@protoc_insertion_point(field_release:protobuf.UserLogged.token)

        return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void UserLogged::set_allocated_token(std::string* token) {
        if (token != nullptr) {

        } else {

        }
        token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
        // @@protoc_insertion_point(field_set_allocated:protobuf.UserLogged.token)
    }

// .protobuf.ProfileInfo profileInfo = 60;
    inline bool UserLogged::has_profileinfo() const {
        return this != internal_default_instance() && profileinfo_ != nullptr;
    }
    inline void UserLogged::clear_profileinfo() {
        if (GetArenaNoVirtual() == nullptr && profileinfo_ != nullptr) {
            delete profileinfo_;
        }
        profileinfo_ = nullptr;
    }
    inline const ::protobuf::ProfileInfo& UserLogged::profileinfo() const {
        const ::protobuf::ProfileInfo* p = profileinfo_;
        // @@protoc_insertion_point(field_get:protobuf.UserLogged.profileInfo)
        return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::ProfileInfo*>(
                &::protobuf::_ProfileInfo_default_instance_);
    }
    inline ::protobuf::ProfileInfo* UserLogged::release_profileinfo() {
        // @@protoc_insertion_point(field_release:protobuf.UserLogged.profileInfo)

        ::protobuf::ProfileInfo* temp = profileinfo_;
        profileinfo_ = nullptr;
        return temp;
    }
    inline ::protobuf::ProfileInfo* UserLogged::mutable_profileinfo() {

        if (profileinfo_ == nullptr) {
            auto* p = CreateMaybeMessage<::protobuf::ProfileInfo>(GetArenaNoVirtual());
            profileinfo_ = p;
        }
        // @@protoc_insertion_point(field_mutable:protobuf.UserLogged.profileInfo)
        return profileinfo_;
    }
    inline void UserLogged::set_allocated_profileinfo(::protobuf::ProfileInfo* profileinfo) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
        if (message_arena == nullptr) {
            delete profileinfo_;
        }
        if (profileinfo) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
            if (message_arena != submessage_arena) {
                profileinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                        message_arena, profileinfo, submessage_arena);
            }

        } else {

        }
        profileinfo_ = profileinfo;
        // @@protoc_insertion_point(field_set_allocated:protobuf.UserLogged.profileInfo)
    }

// -------------------------------------------------------------------

// ProfileInfo

// string username = 18;
    inline void ProfileInfo::clear_username() {
        username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& ProfileInfo::username() const {
        // @@protoc_insertion_point(field_get:protobuf.ProfileInfo.username)
        return username_.GetNoArena();
    }
    inline void ProfileInfo::set_username(const std::string& value) {

        username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.ProfileInfo.username)
    }
    inline void ProfileInfo::set_username(std::string&& value) {

        username_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.ProfileInfo.username)
    }
    inline void ProfileInfo::set_username(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.ProfileInfo.username)
    }
    inline void ProfileInfo::set_username(const char* value, size_t size) {

        username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.ProfileInfo.username)
    }
    inline std::string* ProfileInfo::mutable_username() {

        // @@protoc_insertion_point(field_mutable:protobuf.ProfileInfo.username)
        return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* ProfileInfo::release_username() {
        // @@protoc_insertion_point(field_release:protobuf.ProfileInfo.username)

        return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void ProfileInfo::set_allocated_username(std::string* username) {
        if (username != nullptr) {

        } else {

        }
        username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
        // @@protoc_insertion_point(field_set_allocated:protobuf.ProfileInfo.username)
    }

// string name = 19;
    inline void ProfileInfo::clear_name() {
        name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& ProfileInfo::name() const {
        // @@protoc_insertion_point(field_get:protobuf.ProfileInfo.name)
        return name_.GetNoArena();
    }
    inline void ProfileInfo::set_name(const std::string& value) {

        name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.ProfileInfo.name)
    }
    inline void ProfileInfo::set_name(std::string&& value) {

        name_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.ProfileInfo.name)
    }
    inline void ProfileInfo::set_name(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.ProfileInfo.name)
    }
    inline void ProfileInfo::set_name(const char* value, size_t size) {

        name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.ProfileInfo.name)
    }
    inline std::string* ProfileInfo::mutable_name() {

        // @@protoc_insertion_point(field_mutable:protobuf.ProfileInfo.name)
        return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* ProfileInfo::release_name() {
        // @@protoc_insertion_point(field_release:protobuf.ProfileInfo.name)

        return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void ProfileInfo::set_allocated_name(std::string* name) {
        if (name != nullptr) {

        } else {

        }
        name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
        // @@protoc_insertion_point(field_set_allocated:protobuf.ProfileInfo.name)
    }

// string surname = 20;
    inline void ProfileInfo::clear_surname() {
        surname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline const std::string& ProfileInfo::surname() const {
        // @@protoc_insertion_point(field_get:protobuf.ProfileInfo.surname)
        return surname_.GetNoArena();
    }
    inline void ProfileInfo::set_surname(const std::string& value) {

        surname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:protobuf.ProfileInfo.surname)
    }
    inline void ProfileInfo::set_surname(std::string&& value) {

        surname_.SetNoArena(
                &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:protobuf.ProfileInfo.surname)
    }
    inline void ProfileInfo::set_surname(const char* value) {
                GOOGLE_DCHECK(value != nullptr);

        surname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:protobuf.ProfileInfo.surname)
    }
    inline void ProfileInfo::set_surname(const char* value, size_t size) {

        surname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:protobuf.ProfileInfo.surname)
    }
    inline std::string* ProfileInfo::mutable_surname() {

        // @@protoc_insertion_point(field_mutable:protobuf.ProfileInfo.surname)
        return surname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline std::string* ProfileInfo::release_surname() {
        // @@protoc_insertion_point(field_release:protobuf.ProfileInfo.surname)

        return surname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }
    inline void ProfileInfo::set_allocated_surname(std::string* surname) {
        if (surname != nullptr) {

        } else {

        }
        surname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surname);
        // @@protoc_insertion_point(field_set_allocated:protobuf.ProfileInfo.surname)
    }

// .protobuf.User user = 21;
    inline bool ProfileInfo::has_user() const {
        return this != internal_default_instance() && user_ != nullptr;
    }
    inline void ProfileInfo::clear_user() {
        if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
            delete user_;
        }
        user_ = nullptr;
    }
    inline const ::protobuf::User& ProfileInfo::user() const {
        const ::protobuf::User* p = user_;
        // @@protoc_insertion_point(field_get:protobuf.ProfileInfo.user)
        return p != nullptr ? *p : *reinterpret_cast<const ::protobuf::User*>(
                &::protobuf::_User_default_instance_);
    }
    inline ::protobuf::User* ProfileInfo::release_user() {
        // @@protoc_insertion_point(field_release:protobuf.ProfileInfo.user)

        ::protobuf::User* temp = user_;
        user_ = nullptr;
        return temp;
    }
    inline ::protobuf::User* ProfileInfo::mutable_user() {

        if (user_ == nullptr) {
            auto* p = CreateMaybeMessage<::protobuf::User>(GetArenaNoVirtual());
            user_ = p;
        }
        // @@protoc_insertion_point(field_mutable:protobuf.ProfileInfo.user)
        return user_;
    }
    inline void ProfileInfo::set_allocated_user(::protobuf::User* user) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
        if (message_arena == nullptr) {
            delete user_;
        }
        if (user) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
            if (message_arena != submessage_arena) {
                user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                        message_arena, user, submessage_arena);
            }

        } else {

        }
        user_ = user;
        // @@protoc_insertion_point(field_set_allocated:protobuf.ProfileInfo.user)
    }

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserMap

// map<string, .protobuf.ProfileInfo> userMap = 30;
    inline int UserMap::usermap_size() const {
        return usermap_.size();
    }
    inline void UserMap::clear_usermap() {
        usermap_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::ProfileInfo >&
    UserMap::usermap() const {
        // @@protoc_insertion_point(field_map:protobuf.UserMap.userMap)
        return usermap_.GetMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::ProfileInfo >*
    UserMap::mutable_usermap() {
        // @@protoc_insertion_point(field_mutable_map:protobuf.UserMap.userMap)
        return usermap_.MutableMap();
    }

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileClientMap

// map<string, .protobuf.FilesInfoList> fileClientMap = 43;
    inline int FileClientMap::fileclientmap_size() const {
        return fileclientmap_.size();
    }
    inline void FileClientMap::clear_fileclientmap() {
        fileclientmap_.Clear();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::FilesInfoList >&
    FileClientMap::fileclientmap() const {
        // @@protoc_insertion_point(field_map:protobuf.FileClientMap.fileClientMap)
        return fileclientmap_.GetMap();
    }
    inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf::FilesInfoList >*
    FileClientMap::mutable_fileclientmap() {
        // @@protoc_insertion_point(field_mutable_map:protobuf.FileClientMap.fileClientMap)
        return fileclientmap_.MutableMap();
    }

// -------------------------------------------------------------------

// SymbolVector

// repeated .protobuf.Symbol symbolVector = 50;
    inline int SymbolVector::symbolvector_size() const {
        return symbolvector_.size();
    }
    inline void SymbolVector::clear_symbolvector() {
        symbolvector_.Clear();
    }
    inline ::protobuf::Symbol* SymbolVector::mutable_symbolvector(int index) {
        // @@protoc_insertion_point(field_mutable:protobuf.SymbolVector.symbolVector)
        return symbolvector_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Symbol >*
    SymbolVector::mutable_symbolvector() {
        // @@protoc_insertion_point(field_mutable_list:protobuf.SymbolVector.symbolVector)
        return &symbolvector_;
    }
    inline const ::protobuf::Symbol& SymbolVector::symbolvector(int index) const {
        // @@protoc_insertion_point(field_get:protobuf.SymbolVector.symbolVector)
        return symbolvector_.Get(index);
    }
    inline ::protobuf::Symbol* SymbolVector::add_symbolvector() {
        // @@protoc_insertion_point(field_add:protobuf.SymbolVector.symbolVector)
        return symbolvector_.Add();
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf::Symbol >&
    SymbolVector::symbolvector() const {
        // @@protoc_insertion_point(field_list:protobuf.SymbolVector.symbolVector)
        return symbolvector_;
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messageP_2eproto
